name: Auto Fix Bug

on:
  issues:
    types: [opened, labeled]

jobs:
  analyze-and-fix:
    # 'auto-fix-candidate' ラベルが付いたIssueのみ処理
    if: |
      (github.event.action == 'labeled' && github.event.label.name == 'auto-fix-candidate') ||
      (github.event.action == 'opened' && contains(github.event.issue.labels.*.name, 'auto-fix-candidate'))
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install anthropic
          pip install pygithub
          pip install pillow
          pip install requests
          
      - name: Analyze issue
        id: analyze
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/analyze_issue.py \
            --issue-number ${{ github.event.issue.number }} \
            --repo ${{ github.repository }}
            
      - name: Generate fix
        id: generate
        if: steps.analyze.outputs.can_auto_fix == 'true'
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/generate_fix.py \
            --issue-number ${{ github.event.issue.number }} \
            --repo ${{ github.repository }} \
            --analysis "${{ steps.analyze.outputs.analysis }}"
            
      - name: Create fix branch
        if: steps.generate.outputs.has_fix == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b fix/issue-${{ github.event.issue.number }}
          
      - name: Apply fix
        if: steps.generate.outputs.has_fix == 'true'
        run: |
          python scripts/apply_fix.py \
            --fix-data "${{ steps.generate.outputs.fix_data }}"
            
      - name: Run Swift tests
        if: steps.generate.outputs.has_fix == 'true'
        run: |
          # macOS環境では xcodebuild を使用
          # Ubuntu環境では Swift Package Manager を使用（将来的な対応）
          echo "Tests would run here in macOS environment"
            
      - name: Commit changes
        if: steps.generate.outputs.has_fix == 'true'
        run: |
          git add -A
          git commit -m "Auto-fix: ${{ github.event.issue.title }}

          Fixes #${{ github.event.issue.number }}
          
          This fix was automatically generated by Claude AI."
          
      - name: Push branch
        if: steps.generate.outputs.has_fix == 'true'
        run: |
          git push origin fix/issue-${{ github.event.issue.number }}
            
      - name: Create PR
        if: steps.generate.outputs.has_fix == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "Auto-fix: ${{ github.event.issue.title }}" \
            --body "$(cat <<'EOF'
          ## 自動修正
          
          このPRは Issue #${{ github.event.issue.number }} を自動的に修正します。
          
          ### 修正内容
          ${{ steps.generate.outputs.fix_summary }}
          
          ### 安全性チェック
          - 変更ファイル数: ${{ steps.generate.outputs.changed_files_count }}
          - 変更行数: ${{ steps.generate.outputs.changed_lines_count }}
          - リスクレベル: ${{ steps.generate.outputs.risk_level }}
          
          ### テスト結果
          - [ ] ビルド成功
          - [ ] 既存テストパス
          - [ ] 新規テスト追加（必要な場合）
          
          ---
          🤖 このPRは自動生成されました。レビューをお願いします。
          EOF
          )" \
            --label "auto-generated" \
            --assignee ${{ github.event.issue.user.login }}
            
      - name: Comment on issue
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ steps.generate.outputs.has_fix }}" == "true" ]; then
            gh issue comment ${{ github.event.issue.number }} \
              --body "🤖 自動修正を試みました。PR #${{ steps.create-pr.outputs.pr_number }} をご確認ください。"
          elif [ "${{ steps.analyze.outputs.can_auto_fix }}" == "false" ]; then
            gh issue comment ${{ github.event.issue.number }} \
              --body "🤖 このIssueは自動修正の対象外です。理由: ${{ steps.analyze.outputs.reason }}"
          else
            gh issue comment ${{ github.event.issue.number }} \
              --body "🤖 自動修正の処理中にエラーが発生しました。開発者による対応が必要です。"
          fi