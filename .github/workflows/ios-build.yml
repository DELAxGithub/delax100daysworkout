name: iOS Build & Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'Delax100DaysWorkout/**/*.swift'
      - 'Delax100DaysWorkout.xcodeproj/**'
      - '*.xcworkspace/**'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to build'
        required: false
        type: string

jobs:
  build:
    name: Build iOS App
    runs-on: macos-latest
    
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # PRの場合はPRブランチをチェックアウト
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'
          
      - name: Show Xcode version
        run: xcodebuild -version
        
      - name: Show available simulators
        run: xcrun simctl list devices available
        
      - name: Clean previous builds
        run: |
          echo "🧹 Cleaning previous builds..."
          cd Delax100DaysWorkout
          xcodebuild clean \
            -project Delax100DaysWorkout.xcodeproj \
            -scheme Delax100DaysWorkout \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' || \
          xcodebuild clean \
            -project Delax100DaysWorkout.xcodeproj \
            -scheme Delax100DaysWorkout \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest'
            
      - name: Build iOS App
        id: build
        run: |
          echo "🔨 Building iOS app..."
          cd Delax100DaysWorkout
          
          # iPhone 16 Pro で試行、失敗したら iPhone 15 Pro で再試行
          BUILD_RESULT=0
          xcodebuild build \
            -project Delax100DaysWorkout.xcodeproj \
            -scheme Delax100DaysWorkout \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            -configuration Debug \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO || BUILD_RESULT=$?
            
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "⚠️ iPhone 16 Pro build failed, trying iPhone 15 Pro..."
            xcodebuild build \
              -project Delax100DaysWorkout.xcodeproj \
              -scheme Delax100DaysWorkout \
              -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' \
              -configuration Debug \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO
          fi
          
          echo "✅ Build completed successfully!"
          
      - name: Run basic tests (if test target exists)
        continue-on-error: true
        run: |
          echo "🧪 Running tests..."
          cd Delax100DaysWorkout
          
          # テストターゲットが存在するかチェック
          if xcodebuild -project Delax100DaysWorkout.xcodeproj -list | grep -q "Test"; then
            xcodebuild test \
              -project Delax100DaysWorkout.xcodeproj \
              -scheme Delax100DaysWorkout \
              -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' || \
            xcodebuild test \
              -project Delax100DaysWorkout.xcodeproj \
              -scheme Delax100DaysWorkout \
              -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest'
          else
            echo "ℹ️ No test targets found, skipping tests"
          fi
          
      - name: Comment build result on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            const buildSuccess = ${{ steps.build.outcome == 'success' }};
            const prNumber = context.payload.pull_request.number;
            
            let comment = '';
            if (buildSuccess) {
              comment = `## ✅ iOS Build Successful!
              
              🎉 **Build completed successfully on macOS runner**
              
              ### Build Details
              - **Scheme**: Delax100DaysWorkout
              - **Configuration**: Debug  
              - **Target**: iOS Simulator
              - **Status**: Ready for local testing
              
              ### Next Steps
              1. Review the code changes
              2. Test locally with: \`./scripts/sync-pr.sh ${prNumber}\`
              3. Merge when satisfied
              
              **This PR is ready to merge!** 🚀`;
              
              // Add ready-to-merge label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['✅ Ready to merge', 'iOS build passed']
              });
              
            } else {
              comment = `## ❌ iOS Build Failed
              
              😞 **Build failed on macOS runner**
              
              ### Build Details
              - **Scheme**: Delax100DaysWorkout
              - **Configuration**: Debug
              - **Target**: iOS Simulator
              - **Status**: Needs fixing
              
              ### Next Steps
              1. Check the [build logs](${context.payload.pull_request.html_url}/checks) for details
              2. Fix the build errors
              3. Push changes to trigger rebuild
              
              **This PR needs fixes before merging** 🔧`;
              
              // Add needs-fix label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['❌ Build failed', 'needs-fix']
              });
            }
            
            // Post comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
            
      - name: Save build artifacts
        if: always()
        run: |
          # ビルドログを保存
          mkdir -p build-logs
          echo "Build completed at $(date)" > build-logs/build-summary.txt
          echo "Xcode version: $(xcodebuild -version | head -1)" >> build-logs/build-summary.txt
          echo "Build result: ${{ steps.build.outcome }}" >> build-logs/build-summary.txt
          
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs-${{ github.run_number }}
          path: build-logs/
          retention-days: 7