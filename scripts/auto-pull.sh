#!/bin/bash

# Ëá™Âãï„Éó„É´„Ç∑„Çπ„ÉÜ„É†
# „Éû„Éº„Ç∏Ê§úÁü•„Å®„É≠„Éº„Ç´„É´ÂêåÊúü„ÅÆËá™ÂãïÂåñ

set -e

# „Ç´„É©„ÉºÂá∫ÂäõÁî®
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Ë®≠ÂÆö
MAIN_BRANCH="main"
REMOTE_NAME="origin"
CHECK_INTERVAL=30  # Áßí
LOG_FILE="logs/auto-pull.log"

# „É≠„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
mkdir -p logs

# „É≠„Ç∞Èñ¢Êï∞
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S'): $1" | tee -a "$LOG_FILE"
}

# ‰ΩøÁî®ÊñπÊ≥ï„ÇíË°®Á§∫
show_help() {
    echo -e "${BLUE}üîÑ Ëá™Âãï„Éó„É´„Ç∑„Çπ„ÉÜ„É†${NC}"
    echo ""
    echo "‰ΩøÁî®ÊñπÊ≥ï:"
    echo "  ./scripts/auto-pull.sh [„Ç™„Éó„Ç∑„Éß„É≥]"
    echo ""
    echo "„Ç™„Éó„Ç∑„Éß„É≥:"
    echo "  start           - Áõ£Ë¶ñ„ÇíÈñãÂßãÔºà„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„ÉâÂÆüË°åÔºâ"
    echo "  stop            - Áõ£Ë¶ñ„ÇíÂÅúÊ≠¢"
    echo "  status          - Áõ£Ë¶ñÁä∂ÊÖã„ÇíÁ¢∫Ë™ç"
    echo "  once            - ‰∏ÄÂõû„Å†„Åë„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å"
    echo "  --interval N    - „ÉÅ„Çß„ÉÉ„ÇØÈñìÈöî„Çí N Áßí„Å´Ë®≠ÂÆöÔºà„Éá„Éï„Ç©„É´„Éà: 30ÁßíÔºâ"
    echo ""
    echo "‰æã:"
    echo "  ./scripts/auto-pull.sh start"
    echo "  ./scripts/auto-pull.sh once"
    echo "  ./scripts/auto-pull.sh start --interval 60"
    echo ""
}

# ÁèæÂú®„ÅÆ„Ç≥„Éü„ÉÉ„Éà„Éè„ÉÉ„Ç∑„É•„ÇíÂèñÂæó
get_current_commit() {
    git rev-parse HEAD 2>/dev/null || echo "unknown"
}

# „É™„É¢„Éº„Éà„ÅÆÊúÄÊñ∞„Ç≥„Éü„ÉÉ„Éà„Éè„ÉÉ„Ç∑„É•„ÇíÂèñÂæó
get_remote_commit() {
    git ls-remote "$REMOTE_NAME" "$MAIN_BRANCH" 2>/dev/null | cut -f1 || echo "unknown"
}

# git pull „ÇíÂÆâÂÖ®„Å´ÂÆüË°å
safe_pull() {
    echo -e "${BLUE}üîÑ Checking for updates...${NC}"
    
    # „É™„É¢„Éº„ÉàÊÉÖÂ†±„ÇíÊõ¥Êñ∞
    if ! git fetch "$REMOTE_NAME" "$MAIN_BRANCH" 2>/dev/null; then
        echo -e "${RED}‚ùå Failed to fetch from remote${NC}"
        log "ERROR: Failed to fetch from remote"
        return 1
    fi
    
    local current_commit=$(get_current_commit)
    local remote_commit=$(git rev-parse "$REMOTE_NAME/$MAIN_BRANCH" 2>/dev/null || echo "unknown")
    
    if [ "$current_commit" = "$remote_commit" ]; then
        echo -e "${GREEN}‚úÖ Already up to date${NC}"
        return 0
    fi
    
    echo -e "${YELLOW}üì• New changes detected, pulling...${NC}"
    log "INFO: New changes detected - Local: $current_commit, Remote: $remote_commit"
    
    # ‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if ! git diff-index --quiet HEAD -- 2>/dev/null; then
        echo -e "${RED}‚ùå Working directory has uncommitted changes${NC}"
        echo -e "${YELLOW}üí° Please commit or stash your changes before auto-pull${NC}"
        log "ERROR: Uncommitted changes detected"
        return 1
    fi
    
    # „Éó„É´„ÇíÂÆüË°å
    if git pull "$REMOTE_NAME" "$MAIN_BRANCH" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Successfully pulled latest changes${NC}"
        log "SUCCESS: Pulled changes from $current_commit to $(get_current_commit)"
        
        # ÈÄöÁü•„ÇíÈÄÅ‰ø°
        if command -v ./scripts/notify.sh >/dev/null 2>&1; then
            ./scripts/notify.sh merge-pulled "$remote_commit"
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå Failed to pull changes${NC}"
        log "ERROR: Failed to pull changes"
        return 1
    fi
}

# ‰∏ÄÂõû„Å†„Åë„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å
check_once() {
    echo -e "${BLUE}üîç Single check execution${NC}"
    log "INFO: Single check started"
    
    if safe_pull; then
        echo -e "${GREEN}üéâ Check completed successfully${NC}"
        log "INFO: Single check completed successfully"
    else
        echo -e "${RED}üí• Check failed${NC}"
        log "ERROR: Single check failed"
        exit 1
    fi
}

# Áõ£Ë¶ñÈñãÂßã
start_monitoring() {
    local pidfile="logs/auto-pull.pid"
    
    # Êó¢„Å´ÂÆüË°å‰∏≠„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if [ -f "$pidfile" ] && kill -0 "$(cat "$pidfile")" 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Auto-pull is already running (PID: $(cat "$pidfile"))${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üöÄ Starting auto-pull monitoring...${NC}"
    echo -e "${PURPLE}üìä Check interval: ${CHECK_INTERVAL} seconds${NC}"
    echo -e "${PURPLE}üìÇ Log file: $LOG_FILE${NC}"
    
    log "INFO: Auto-pull monitoring started with interval ${CHECK_INTERVAL}s"
    
    # „Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÁõ£Ë¶ñÈñãÂßã
    {
        while true; do
            safe_pull || true  # „Ç®„É©„Éº„Åß„ÇÇÁ∂ôÁ∂ö
            sleep "$CHECK_INTERVAL"
        done
    } &
    
    local monitor_pid=$!
    echo "$monitor_pid" > "$pidfile"
    
    echo -e "${GREEN}‚úÖ Auto-pull started in background (PID: $monitor_pid)${NC}"
    echo -e "${PURPLE}üí° Stop with: ./scripts/auto-pull.sh stop${NC}"
}

# Áõ£Ë¶ñÂÅúÊ≠¢
stop_monitoring() {
    local pidfile="logs/auto-pull.pid"
    
    if [ ! -f "$pidfile" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è No auto-pull process found${NC}"
        return 0
    fi
    
    local pid=$(cat "$pidfile")
    
    if kill -0 "$pid" 2>/dev/null; then
        echo -e "${BLUE}üõë Stopping auto-pull monitoring (PID: $pid)...${NC}"
        kill "$pid"
        rm -f "$pidfile"
        echo -e "${GREEN}‚úÖ Auto-pull stopped${NC}"
        log "INFO: Auto-pull monitoring stopped"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Process $pid not found, cleaning up pidfile${NC}"
        rm -f "$pidfile"
    fi
}

# Áõ£Ë¶ñÁä∂ÊÖãÁ¢∫Ë™ç
check_status() {
    local pidfile="logs/auto-pull.pid"
    
    echo -e "${BLUE}üìä Auto-pull Status${NC}"
    echo ""
    
    if [ -f "$pidfile" ] && kill -0 "$(cat "$pidfile")" 2>/dev/null; then
        local pid=$(cat "$pidfile")
        echo -e "${GREEN}‚úÖ Running (PID: $pid)${NC}"
        echo -e "${PURPLE}üìÇ Log file: $LOG_FILE${NC}"
        echo -e "${PURPLE}‚è∞ Check interval: ${CHECK_INTERVAL} seconds${NC}"
        
        # ÊúÄÊñ∞„É≠„Ç∞„ÇíË°®Á§∫
        if [ -f "$LOG_FILE" ]; then
            echo ""
            echo -e "${BLUE}üìã Recent logs:${NC}"
            tail -5 "$LOG_FILE" 2>/dev/null || echo "No logs available"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Not running${NC}"
        rm -f "$pidfile" 2>/dev/null
    fi
    
    echo ""
    echo -e "${BLUE}üìç Repository status:${NC}"
    echo -e "${PURPLE}Branch: $(git branch --show-current 2>/dev/null || echo 'unknown')${NC}"
    echo -e "${PURPLE}Local commit: $(get_current_commit | cut -c1-8)${NC}"
    echo -e "${PURPLE}Remote commit: $(get_remote_commit | cut -c1-8)${NC}"
}

# ÂºïÊï∞Ëß£Êûê
while [[ $# -gt 0 ]]; do
    case $1 in
        start)
            COMMAND="start"
            shift
            ;;
        stop)
            COMMAND="stop"
            shift
            ;;
        status)
            COMMAND="status"
            shift
            ;;
        once)
            COMMAND="once"
            shift
            ;;
        --interval)
            CHECK_INTERVAL="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Unknown option: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# „Éá„Éï„Ç©„É´„Éà„Ç≥„Éû„É≥„ÉâÔºàÂºïÊï∞„Å™„Åó„ÅÆÂ†¥ÂêàÔºâ
if [ -z "${COMMAND:-}" ]; then
    show_help
    exit 0
fi

# ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåGit„É™„Éù„Ç∏„Éà„É™„Åã„ÉÅ„Çß„ÉÉ„ÇØ
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Not a git repository${NC}"
    exit 1
fi

# ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„Ååmain„Åã„ÉÅ„Çß„ÉÉ„ÇØ
current_branch=$(git branch --show-current 2>/dev/null || echo "unknown")
if [ "$current_branch" != "$MAIN_BRANCH" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Current branch is '$current_branch', not '$MAIN_BRANCH'${NC}"
    echo -e "${BLUE}üí° Auto-pull works best on the main branch${NC}"
fi

# „Ç≥„Éû„É≥„ÉâÂÆüË°å
case "$COMMAND" in
    start)
        start_monitoring
        ;;
    stop)
        stop_monitoring
        ;;
    status)
        check_status
        ;;
    once)
        check_once
        ;;
esac