import SwiftUI
import SwiftData

struct QuickRecordSheet: View {
    @Environment(\.dismiss) private var dismiss
    @Environment(\.modelContext) private var modelContext
    
    let task: DailyTask
    let workoutRecord: WorkoutRecord
    @State private var notes: String = ""
    @State private var showSuccessAnimation = false
    @State private var showToast = false
    @State private var toastMessage = ""
    
    // Cycling specific
    @State private var distance: Double = 0
    @State private var actualPower: Double = 0
    
    // Strength specific
    @State private var exercises: [StrengthExerciseInput] = []
    
    // Flexibility specific
    @State private var forwardBend: Double = 0
    @State private var leftSplit: Double = 90
    @State private var rightSplit: Double = 90
    
    var body: some View {
        NavigationStack {
            ZStack {
                VStack(spacing: 0) {
                    // Success animation
                    if showSuccessAnimation {
                    VStack {
                        Image(systemName: "checkmark.circle.fill")
                            .font(.system(size: 80))
                            .foregroundStyle(.green)
                            .transition(.scale.combined(with: .opacity))
                        
                        Text("記録完了！")
                            .font(.title2)
                            .fontWeight(.bold)
                            .padding(.top, 8)
                    }
                    .padding()
                    .transition(.move(edge: .top).combined(with: .opacity))
                }
                
                ScrollView {
                    VStack(alignment: .leading, spacing: 20) {
                        // Task info
                        VStack(alignment: .leading, spacing: 8) {
                            Text(task.title)
                                .font(.title3)
                                .fontWeight(.semibold)
                            
                            if let description = task.taskDescription {
                                Text(description)
                                    .font(.subheadline)
                                    .foregroundStyle(.secondary)
                            }
                        }
                        .padding(.horizontal)
                        .padding(.top)
                        
                        Divider()
                        
                        // Type-specific input
                        Group {
                            switch task.workoutType {
                            case .cycling:
                                cyclingInputSection
                            case .strength:
                                strengthInputSection
                            case .flexibility:
                                flexibilityInputSection
                            }
                        }
                        .padding(.horizontal)
                        
                        // Notes section
                        VStack(alignment: .leading, spacing: 8) {
                            Label("メモ", systemImage: "note.text")
                                .font(.headline)
                            
                            TextEditor(text: $notes)
                                .frame(minHeight: 80)
                                .padding(8)
                                .background(Color(.systemGray6))
                                .cornerRadius(8)
                        }
                        .padding(.horizontal)
                        
                        // Quick phrases
                        ScrollView(.horizontal, showsIndicators: false) {
                            HStack(spacing: 8) {
                                ForEach(quickPhrases, id: \.self) { phrase in
                                    Button(action: {
                                        if !notes.isEmpty {
                                            notes += "\n"
                                        }
                                        notes += phrase
                                    }) {
                                        Text(phrase)
                                            .font(.caption)
                                            .padding(.horizontal, 12)
                                            .padding(.vertical, 6)
                                            .background(Color(.systemGray5))
                                            .cornerRadius(15)
                                    }
                                    .buttonStyle(.plain)
                                }
                            }
                            .padding(.horizontal)
                        }
                    }
                    .padding(.bottom, 100)
                }
                
                // Toast notification
                if showToast {
                    VStack {
                        Spacer()
                        HStack {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.white)
                            Text(toastMessage)
                                .foregroundColor(.white)
                                .fontWeight(.medium)
                        }
                        .padding(.horizontal, 20)
                        .padding(.vertical, 12)
                        .background(Color.green)
                        .cornerRadius(25)
                        .shadow(radius: 4)
                        .transition(.move(edge: .bottom).combined(with: .opacity))
                        .animation(.spring(), value: showToast)
                    }
                    .padding(.bottom, 50)
                }
            }
            .navigationTitle("詳細を追加")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("スキップ") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .confirmationAction) {
                    Button("保存") {
                        saveDetails()
                    }
                    .fontWeight(.semibold)
                }
            }
        }
        .onAppear {
            setupInitialValues()
        }
    }
    
    // MARK: - Input Sections
    
    private var cyclingInputSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Label("サイクリング詳細", systemImage: "bicycle")
                .font(.headline)
            
            VStack(spacing: 12) {
                HStack {
                    Label("距離", systemImage: "location")
                    Spacer()
                    HStack {
                        TextField("0", value: $distance, format: .number.precision(.fractionLength(1)))
                            .keyboardType(.decimalPad)
                            .multilineTextAlignment(.trailing)
                            .frame(width: 60)
                        Text("km")
                    }
                }
                
                HStack {
                    Label("平均パワー", systemImage: "bolt")
                    Spacer()
                    HStack {
                        TextField("0", value: $actualPower, format: .number.precision(.fractionLength(0)))
                            .keyboardType(.numberPad)
                            .multilineTextAlignment(.trailing)
                            .frame(width: 60)
                        Text("W")
                    }
                }
                
                if let targetPower = task.targetDetails?.targetPower {
                    HStack {
                        Text("目標: \(targetPower)W")
                            .font(.caption)
                            .foregroundStyle(.secondary)
                        Spacer()
                        if actualPower > 0 {
                            let percentage = Int((actualPower / Double(targetPower)) * 100)
                            Text("\(percentage)%")
                                .font(.caption)
                                .foregroundStyle(percentage >= 95 ? .green : .orange)
                        }
                    }
                }
            }
            .padding()
            .background(Color(.systemGray6))
            .cornerRadius(12)
        }
    }
    
    private var strengthInputSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Label("筋トレ詳細", systemImage: "dumbbell")
                .font(.headline)
            
            if task.targetDetails?.exercises != nil {
                ForEach(exercises.indices, id: \.self) { index in
                    VStack(alignment: .leading, spacing: 8) {
                        Text(exercises[index].name)
                            .font(.subheadline)
                            .fontWeight(.medium)
                        
                        HStack(spacing: 16) {
                            VStack(alignment: .leading) {
                                Text("重量")
                                    .font(.caption)
                                    .foregroundStyle(.secondary)
                                HStack {
                                    TextField("0", value: $exercises[index].weight, format: .number.precision(.fractionLength(1)))
                                        .keyboardType(.decimalPad)
                                        .frame(width: 50)
                                    Text("kg")
                                        .font(.caption)
                                }
                            }
                            
                            VStack(alignment: .leading) {
                                Text("セット")
                                    .font(.caption)
                                    .foregroundStyle(.secondary)
                                TextField("0", value: $exercises[index].sets, format: .number)
                                    .keyboardType(.numberPad)
                                    .frame(width: 40)
                            }
                            
                            VStack(alignment: .leading) {
                                Text("レップ")
                                    .font(.caption)
                                    .foregroundStyle(.secondary)
                                TextField("0", value: $exercises[index].reps, format: .number)
                                    .keyboardType(.numberPad)
                                    .frame(width: 40)
                            }
                            
                            Spacer()
                        }
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(8)
                    }
                }
            }
        }
    }
    
    private var flexibilityInputSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Label("柔軟性詳細", systemImage: "figure.flexibility")
                .font(.headline)
            
            VStack(spacing: 12) {
                HStack {
                    Label("前屈", systemImage: "arrow.down")
                    Spacer()
                    HStack {
                        TextField("0", value: $forwardBend, format: .number.precision(.fractionLength(1)))
                            .keyboardType(.decimalPad)
                            .multilineTextAlignment(.trailing)
                            .frame(width: 60)
                        Text("cm")
                    }
                }
                
                HStack {
                    Label("左開脚", systemImage: "arrow.left.and.right")
                    Spacer()
                    HStack {
                        TextField("90", value: $leftSplit, format: .number.precision(.fractionLength(0)))
                            .keyboardType(.numberPad)
                            .multilineTextAlignment(.trailing)
                            .frame(width: 50)
                        Text("°")
                    }
                }
                
                HStack {
                    Label("右開脚", systemImage: "arrow.left.and.right")
                    Spacer()
                    HStack {
                        TextField("90", value: $rightSplit, format: .number.precision(.fractionLength(0)))
                            .keyboardType(.numberPad)
                            .multilineTextAlignment(.trailing)
                            .frame(width: 50)
                        Text("°")
                    }
                }
            }
            .padding()
            .background(Color(.systemGray6))
            .cornerRadius(12)
        }
    }
    
    // MARK: - Helper Methods
    
    private var quickPhrases: [String] {
        switch task.workoutType {
        case .cycling:
            return ["調子良かった", "向かい風が強かった", "疲れていた", "ペース配分を意識した"]
        case .strength:
            return ["フォームを意識した", "限界まで追い込んだ", "軽めに調整した", "新記録！"]
        case .flexibility:
            return ["体が硬かった", "少し改善した", "痛みがあった", "調子良かった"]
        }
    }
    
    private func setupInitialValues() {
        switch task.workoutType {
        case .cycling:
            if let detail = workoutRecord.cyclingDetail {
                distance = detail.distance
                actualPower = detail.averagePower
            } else if let target = task.targetDetails {
                actualPower = Double(target.targetPower ?? 0)
            }
            
        case .strength:
            if let exercises = task.targetDetails?.exercises {
                self.exercises = exercises.map { name in
                    StrengthExerciseInput(
                        name: name,
                        weight: 0,
                        sets: task.targetDetails?.targetSets ?? 3,
                        reps: task.targetDetails?.targetReps ?? 10
                    )
                }
            }
            
        case .flexibility:
            if let detail = workoutRecord.flexibilityDetail {
                forwardBend = detail.forwardBendDistance
                leftSplit = detail.leftSplitAngle
                rightSplit = detail.rightSplitAngle
            }
        }
    }
    
    private func saveDetails() {
        // Notes can be added to details or summary
        let noteText = notes.isEmpty ? nil : notes
        
        switch task.workoutType {
        case .cycling:
            if let detail = workoutRecord.cyclingDetail {
                detail.distance = distance
                detail.averagePower = actualPower
                if let note = noteText {
                    // Add note to summary
                    workoutRecord.summary = "\(workoutRecord.summary)\n\(note)"
                }
            }
            
        case .strength:
            // Clear existing details
            workoutRecord.strengthDetails?.forEach { modelContext.delete($0) }
            
            // Add new details
            let newDetails = exercises.compactMap { input -> StrengthDetail? in
                guard input.weight > 0 && input.sets > 0 && input.reps > 0 else { return nil }
                return StrengthDetail(
                    exercise: input.name,
                    sets: input.sets,
                    reps: input.reps,
                    weight: input.weight
                )
            }
            
            newDetails.forEach { detail in
                modelContext.insert(detail)
                if let note = noteText {
                    detail.notes = note
                }
                workoutRecord.strengthDetails?.append(detail)
            }
            
        case .flexibility:
            if let detail = workoutRecord.flexibilityDetail {
                detail.forwardBendDistance = forwardBend
                detail.leftSplitAngle = leftSplit
                detail.rightSplitAngle = rightSplit
                if let note = noteText {
                    // Add note to summary
                    workoutRecord.summary = "\(workoutRecord.summary)\n\(note)"
                }
            }
        }
        
        do {
            try modelContext.save()
            
            // Haptic feedback
            let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
            impactFeedback.impactOccurred()
            
            // Show success animation and toast
            withAnimation(.spring()) {
                showSuccessAnimation = true
                toastMessage = "保存しました！"
                showToast = true
            }
            
            // Hide toast after delay
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                withAnimation {
                    showToast = false
                }
            }
            
            // Dismiss sheet
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
                dismiss()
            }
        } catch {
            print("Error saving details: \(error)")
            
            // Error feedback
            let notificationFeedback = UINotificationFeedbackGenerator()
            notificationFeedback.notificationOccurred(.error)
            
            withAnimation {
                toastMessage = "保存に失敗しました"
                showToast = true
            }
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                withAnimation {
                    showToast = false
                }
            }
        }
    }
}

// Helper struct for strength exercise input
private struct StrengthExerciseInput {
    var name: String
    var weight: Double
    var sets: Int
    var reps: Int
}